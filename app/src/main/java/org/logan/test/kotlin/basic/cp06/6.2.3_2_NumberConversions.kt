package org.logan.test.kotlin.basic.cp06

/**
 * desc: 数字转换 - 自动转换 <br/>
 * time: 2019-11-27 14:05 <br/>
 * author: Logan <br/>
 * since V 1.0 <br/>
 */

fun foo(l: Long) = println(l)

fun main() {
    // Kotlin中
    // 当你书写数字字面值的时候，一般不需要使用转换函数。 一种可能性是用这种特殊的语法来显式地标记常量的类型，比如42L或者42.0f。
    // 而且即使你没有用这种语法，当你使用数字字面值去初始化一个类型己知的变量时(第一种情况)，又或是把字面值作为实参传给函数时(第二种情况)，
    // 必要的转换会自动地发生。此外，算术运算符也被重载了，它们可以接收所有适当的数字类型(第三种情况)。如下例：
    val b: Byte = 1 // 第一种情况
    val l = b + 1L // 第三种情况，+可以进行字节类型和长整型参数的计算
    fool(42) // 第二种情况，编译器认为42是一个长整型

    // Kotlin 算术运算符关于数值范围溢出的行为和Java完全一致: Kotlin并没有引入由溢出检查带来的额外开销 。
}